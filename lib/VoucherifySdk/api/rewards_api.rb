=begin
#Voucherify API

#Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

The version of the OpenAPI document: v2018-08-01
Contact: support@voucherify.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module VoucherifySdk
  class RewardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Reward
    # Create a new reward.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsCreateRequestBody] :rewards_create_request_body Define parameters of the new reward.
    # @return [RewardsCreateResponseBody]
    def create_reward(opts = {})
      data, _status_code, _headers = create_reward_with_http_info(opts)
      data
    end

    # Create Reward
    # Create a new reward.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsCreateRequestBody] :rewards_create_request_body Define parameters of the new reward.
    # @return [Array<(RewardsCreateResponseBody, Integer, Hash)>] RewardsCreateResponseBody data, response status code and response headers
    private def create_reward_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.create_reward ...'
      end
      # resource path
      local_var_path = '/v1/rewards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'rewards_create_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'RewardsCreateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.create_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#create_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Reward Assignment
    # Assigns a reward to a specified loyalty campaign.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsAssignmentsCreateRequestBody] :rewards_assignments_create_request_body Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.
    # @return [RewardsAssignmentsCreateResponseBody]
    def create_reward_assignment(reward_id, opts = {})
      data, _status_code, _headers = create_reward_assignment_with_http_info(reward_id, opts)
      data
    end

    # Create Reward Assignment
    # Assigns a reward to a specified loyalty campaign.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsAssignmentsCreateRequestBody] :rewards_assignments_create_request_body Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.
    # @return [Array<(RewardsAssignmentsCreateResponseBody, Integer, Hash)>] RewardsAssignmentsCreateResponseBody data, response status code and response headers
    private def create_reward_assignment_with_http_info(reward_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.create_reward_assignment ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}/assignments'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'rewards_assignments_create_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'RewardsAssignmentsCreateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.create_reward_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#create_reward_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Reward
    # Delete a reward.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_reward(reward_id, opts = {})
      delete_reward_with_http_info(reward_id, opts)
      nil
    end

    # Delete Reward
    # Delete a reward.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    private def delete_reward_with_http_info(reward_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.delete_reward ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.delete_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#delete_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Reward Assignment
    # This method deletes a reward assignment for a particular reward.
    # @param reward_id [String] A unique reward ID.
    # @param assignment_id [String] A unique reward assignment ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_reward_assignment(reward_id, assignment_id, opts = {})
      delete_reward_assignment_with_http_info(reward_id, assignment_id, opts)
      nil
    end

    # Delete Reward Assignment
    # This method deletes a reward assignment for a particular reward.
    # @param reward_id [String] A unique reward ID.
    # @param assignment_id [String] A unique reward assignment ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    private def delete_reward_assignment_with_http_info(reward_id, assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.delete_reward_assignment ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}/assignments/{assignmentId}'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s)).sub('{' + 'assignmentId' + '}', CGI.escape(assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.delete_reward_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#delete_reward_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Reward
    # Retrieve a reward by the reward ID.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @return [Reward]
    def get_reward(reward_id, opts = {})
      data, _status_code, _headers = get_reward_with_http_info(reward_id, opts)
      data
    end

    # Get Reward
    # Retrieve a reward by the reward ID.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reward, Integer, Hash)>] Reward data, response status code and response headers
    private def get_reward_with_http_info(reward_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.get_reward ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Reward'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.get_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#get_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Reward Assignment
    # Retrieve a reward assignment.
    # @param reward_id [String] A unique reward ID.
    # @param assignment_id [String] A unique reward assignment ID.
    # @param [Hash] opts the optional parameters
    # @return [RewardsAssignmentsGetResponseBody]
    def get_reward_assignment(reward_id, assignment_id, opts = {})
      data, _status_code, _headers = get_reward_assignment_with_http_info(reward_id, assignment_id, opts)
      data
    end

    # Get Reward Assignment
    # Retrieve a reward assignment.
    # @param reward_id [String] A unique reward ID.
    # @param assignment_id [String] A unique reward assignment ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RewardsAssignmentsGetResponseBody, Integer, Hash)>] RewardsAssignmentsGetResponseBody data, response status code and response headers
    private def get_reward_assignment_with_http_info(reward_id, assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.get_reward_assignment ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}/assignments/{assignmentId}'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s)).sub('{' + 'assignmentId' + '}', CGI.escape(assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RewardsAssignmentsGetResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.get_reward_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#get_reward_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Reward Assignments
    # Retrieve reward assignments by the reward ID.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
    # @option opts [Integer] :page Which page of results to return. The lowest value is 1.
    # @return [RewardsAssignmentsListResponseBody]
    def list_reward_assignments(reward_id, opts = {})
      data, _status_code, _headers = list_reward_assignments_with_http_info(reward_id, opts)
      data
    end

    # List Reward Assignments
    # Retrieve reward assignments by the reward ID.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
    # @option opts [Integer] :page Which page of results to return. The lowest value is 1.
    # @return [Array<(RewardsAssignmentsListResponseBody, Integer, Hash)>] RewardsAssignmentsListResponseBody data, response status code and response headers
    private def list_reward_assignments_with_http_info(reward_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.list_reward_assignments ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}/assignments'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RewardsAssignmentsListResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.list_reward_assignments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#list_reward_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Rewards
    # Retrieve rewards.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
    # @option opts [Integer] :page Which page of results to return. The lowest value is 1.
    # @option opts [String] :assignment_id A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID.
    # @return [RewardsListResponseBody]
    def list_rewards(opts = {})
      data, _status_code, _headers = list_rewards_with_http_info(opts)
      data
    end

    # List Rewards
    # Retrieve rewards.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items.
    # @option opts [Integer] :page Which page of results to return. The lowest value is 1.
    # @option opts [String] :assignment_id A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID.
    # @return [Array<(RewardsListResponseBody, Integer, Hash)>] RewardsListResponseBody data, response status code and response headers
    private def list_rewards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.list_rewards ...'
      end
      # resource path
      local_var_path = '/v1/rewards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'assignment_id'] = opts[:'assignment_id'] if !opts[:'assignment_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RewardsListResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.list_rewards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#list_rewards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Reward
    # Update the details of a reward.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsUpdateRequestBody] :rewards_update_request_body Define the parameters to be updated for the reward.
    # @return [RewardsUpdateResponseBody]
    def update_reward(reward_id, opts = {})
      data, _status_code, _headers = update_reward_with_http_info(reward_id, opts)
      data
    end

    # Update Reward
    # Update the details of a reward.
    # @param reward_id [String] A unique reward ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsUpdateRequestBody] :rewards_update_request_body Define the parameters to be updated for the reward.
    # @return [Array<(RewardsUpdateResponseBody, Integer, Hash)>] RewardsUpdateResponseBody data, response status code and response headers
    private def update_reward_with_http_info(reward_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.update_reward ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'rewards_update_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'RewardsUpdateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.update_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#update_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Reward Assignment
    # Update the number of points needed to successfully redeem the reward.
    # @param reward_id [String] A unique reward ID.
    # @param assignment_id [String] A unique reward assignment ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsAssignmentsUpdateRequestBody] :rewards_assignments_update_request_body Define the number of points required to exchange for the reward.
    # @return [RewardsAssignmentsUpdateResponseBody]
    def update_reward_assignment(reward_id, assignment_id, opts = {})
      data, _status_code, _headers = update_reward_assignment_with_http_info(reward_id, assignment_id, opts)
      data
    end

    # Update Reward Assignment
    # Update the number of points needed to successfully redeem the reward.
    # @param reward_id [String] A unique reward ID.
    # @param assignment_id [String] A unique reward assignment ID.
    # @param [Hash] opts the optional parameters
    # @option opts [RewardsAssignmentsUpdateRequestBody] :rewards_assignments_update_request_body Define the number of points required to exchange for the reward.
    # @return [Array<(RewardsAssignmentsUpdateResponseBody, Integer, Hash)>] RewardsAssignmentsUpdateResponseBody data, response status code and response headers
    private def update_reward_assignment_with_http_info(reward_id, assignment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RewardsApi.update_reward_assignment ...'
      end
      # resource path
      local_var_path = '/v1/rewards/{rewardId}/assignments/{assignmentId}'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s)).sub('{' + 'assignmentId' + '}', CGI.escape(assignment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'rewards_assignments_update_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'RewardsAssignmentsUpdateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id', 'X-App-Token']

      new_options = opts.merge(
        :operation => :"RewardsApi.update_reward_assignment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RewardsApi#update_reward_assignment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
