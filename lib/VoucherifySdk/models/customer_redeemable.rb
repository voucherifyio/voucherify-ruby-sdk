=begin
#Voucherify API

#Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

The version of the OpenAPI document: v2018-08-01
Contact: support@voucherify.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module VoucherifySdk
  # Single customer's redeemable
  class CustomerRedeemable
    # Unique redeemable holder identifier.
    attr_accessor :id

    # Timestamp representing the date and time when the redeemable was assigned. The value is shown in the ISO 8601 format.
    attr_accessor :created_at

    # Identifier of the redeemable item.
    attr_accessor :redeemable_id

    # Type of the redeemable.
    attr_accessor :redeemable_object

    # Identifier of the customer.
    attr_accessor :customer_id

    # Role of the holder.
    attr_accessor :holder_role

    # Unique campaign identifier, assigned by Voucherify.
    attr_accessor :campaign_id

    # Defines the type of the campaign.
    attr_accessor :campaign_type

    # Defines the type of the voucher.
    attr_accessor :voucher_type

    attr_accessor :redeemable

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'redeemable_id' => :'redeemable_id',
        :'redeemable_object' => :'redeemable_object',
        :'customer_id' => :'customer_id',
        :'holder_role' => :'holder_role',
        :'campaign_id' => :'campaign_id',
        :'campaign_type' => :'campaign_type',
        :'voucher_type' => :'voucher_type',
        :'redeemable' => :'redeemable'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'Time',
        :'redeemable_id' => :'String',
        :'redeemable_object' => :'String',
        :'customer_id' => :'String',
        :'holder_role' => :'String',
        :'campaign_id' => :'String',
        :'campaign_type' => :'String',
        :'voucher_type' => :'String',
        :'redeemable' => :'CustomerRedeemableRedeemable'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'id',
        :'created_at',
        :'redeemable_id',
        :'redeemable_object',
        :'customer_id',
        :'holder_role',
        :'campaign_id',
        :'campaign_type',
        :'voucher_type',
        :'redeemable'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'redeemable_id')
        self.redeemable_id = attributes[:'redeemable_id']
      end

      if attributes.key?(:'redeemable_object')
        self.redeemable_object = attributes[:'redeemable_object']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'holder_role')
        self.holder_role = attributes[:'holder_role']
      else
        self.holder_role = 'OWNER'
      end

      if attributes.key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end

      if attributes.key?(:'campaign_type')
        self.campaign_type = attributes[:'campaign_type']
      else
        self.campaign_type = 'DISCOUNT_COUPONS'
      end

      if attributes.key?(:'voucher_type')
        self.voucher_type = attributes[:'voucher_type']
      else
        self.voucher_type = 'DISCOUNT_VOUCHER'
      end

      if attributes.key?(:'redeemable')
        self.redeemable = attributes[:'redeemable']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      holder_role_validator = EnumAttributeValidator.new('String', ["OWNER", "REFERRER", "REFEREE"])
      return false unless holder_role_validator.valid?(@holder_role)
      campaign_type_validator = EnumAttributeValidator.new('String', ["LOYALTY_PROGRAM", "GIFT_VOUCHERS", "DISCOUNT_COUPONS", "PROMOTION", "REFERRAL_PROGRAM", "LUCKY_DRAW"])
      return false unless campaign_type_validator.valid?(@campaign_type)
      voucher_type_validator = EnumAttributeValidator.new('String', ["GIFT_VOUCHER", "DISCOUNT_VOUCHER", "LOYALTY_CARD", "LUCKY_DRAW_CODE"])
      return false unless voucher_type_validator.valid?(@voucher_type)
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          redeemable_id == o.redeemable_id &&
          redeemable_object == o.redeemable_object &&
          customer_id == o.customer_id &&
          holder_role == o.holder_role &&
          campaign_id == o.campaign_id &&
          campaign_type == o.campaign_type &&
          voucher_type == o.voucher_type &&
          redeemable == o.redeemable
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, redeemable_id, redeemable_object, customer_id, holder_role, campaign_id, campaign_type, voucher_type, redeemable].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VoucherifySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
