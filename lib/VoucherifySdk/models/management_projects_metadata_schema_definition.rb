=begin
#Voucherify API

#Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

The version of the OpenAPI document: v2018-08-01
Contact: support@voucherify.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module VoucherifySdk
  # Custom definition name. This is also shown in **Project Settings** > **Metadata Schema** in the Voucherify Dashboard.
  class ManagementProjectsMetadataSchemaDefinition
    # Indicates the type of metadata. Note that `\"geopoint\"` type is a paid feature.
    attr_accessor :type

    # Indicates if this definition is optional or not for the resource.
    attr_accessor :optional

    # Indicates if the definition is an array.
    attr_accessor :array

    # Indicates if the definition has been deleted from the schema.
    attr_accessor :deleted

    # The name of the custom resource (i.e. a nested object) if the resource has been previously defined. Otherwise, it is `null` for other types.
    attr_accessor :object_type

    # Value indicating the minimum length. Available only for the `string` type.
    attr_accessor :min_length

    # Value indicating the maximum length. Available only for the `string` type.
    attr_accessor :max_length

    # Value indicating the exact length. Available only for the `string` type.
    attr_accessor :exact_length

    attr_accessor :eq

    # Array of values that are not allowed. Available only for the `number` type.
    attr_accessor :ne

    # A property of the `number` type must have `less than` this value. The value should be up to two decimal places.
    attr_accessor :lt

    # A property of the `number` type must be `less than or equal` to this value. The value should be up to two decimal places.
    attr_accessor :lte

    # A property of `number` type must be `greater than` this value. The value should be up to two decimal places.
    attr_accessor :gt

    # A property of `number` type must be `greater than or equal` to this value. The value should be up to two decimal places.
    attr_accessor :gte

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'optional' => :'optional',
        :'array' => :'array',
        :'deleted' => :'deleted',
        :'object_type' => :'object_type',
        :'min_length' => :'min_length',
        :'max_length' => :'max_length',
        :'exact_length' => :'exact_length',
        :'eq' => :'eq',
        :'ne' => :'ne',
        :'lt' => :'lt',
        :'lte' => :'lte',
        :'gt' => :'gt',
        :'gte' => :'gte'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'optional' => :'Boolean',
        :'array' => :'Boolean',
        :'deleted' => :'Boolean',
        :'object_type' => :'String',
        :'min_length' => :'Integer',
        :'max_length' => :'Integer',
        :'exact_length' => :'Integer',
        :'eq' => :'Array<Object>',
        :'ne' => :'Array<Float>',
        :'lt' => :'Float',
        :'lte' => :'Float',
        :'gt' => :'Float',
        :'gte' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'type',
        :'optional',
        :'array',
        :'deleted',
        :'object_type',
        :'min_length',
        :'max_length',
        :'exact_length',
        :'eq',
        :'ne',
        :'lt',
        :'lte',
        :'gt',
        :'gte'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'optional')
        self.optional = attributes[:'optional']
      end

      if attributes.key?(:'array')
        self.array = attributes[:'array']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'object_type')
        self.object_type = attributes[:'object_type']
      end

      if attributes.key?(:'min_length')
        self.min_length = attributes[:'min_length']
      end

      if attributes.key?(:'max_length')
        self.max_length = attributes[:'max_length']
      end

      if attributes.key?(:'exact_length')
        self.exact_length = attributes[:'exact_length']
      end

      if attributes.key?(:'eq')
        if (value = attributes[:'eq']).is_a?(Array)
          self.eq = value
        end
      end

      if attributes.key?(:'ne')
        if (value = attributes[:'ne']).is_a?(Array)
          self.ne = value
        end
      end

      if attributes.key?(:'lt')
        self.lt = attributes[:'lt']
      end

      if attributes.key?(:'lte')
        self.lte = attributes[:'lte']
      end

      if attributes.key?(:'gt')
        self.gt = attributes[:'gt']
      end

      if attributes.key?(:'gte')
        self.gte = attributes[:'gte']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      type_validator = EnumAttributeValidator.new('String', ["string", "number", "object", "date", "datetime", "geopoint", "boolean", "image_url"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          optional == o.optional &&
          array == o.array &&
          deleted == o.deleted &&
          object_type == o.object_type &&
          min_length == o.min_length &&
          max_length == o.max_length &&
          exact_length == o.exact_length &&
          eq == o.eq &&
          ne == o.ne &&
          lt == o.lt &&
          lte == o.lte &&
          gt == o.gt &&
          gte == o.gte
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, optional, array, deleted, object_type, min_length, max_length, exact_length, eq, ne, lt, lte, gt, gte].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VoucherifySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
