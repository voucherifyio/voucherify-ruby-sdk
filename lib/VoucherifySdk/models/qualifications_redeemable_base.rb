=begin
#Voucherify API

#Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

The version of the OpenAPI document: v2018-08-01
Contact: support@voucherify.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module VoucherifySdk
  # Data of single redeemable which was properly qualified.
  class QualificationsRedeemableBase
    # Id of the redeemable.
    attr_accessor :id

    # Object type of the redeemable.
    attr_accessor :object

    # Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.
    attr_accessor :created_at

    attr_accessor :result

    attr_accessor :order

    # A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.
    attr_accessor :validation_rule_id

    attr_accessor :applicable_to

    attr_accessor :inapplicable_to

    # The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
    attr_accessor :metadata

    # List of category information.
    attr_accessor :categories

    # Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard.
    attr_accessor :banner

    # Name of the redeemable.
    attr_accessor :name

    # Name of the campaign associated to the redeemable. This field is available only if object is not `campaign`
    attr_accessor :campaign_name

    # Id of the campaign associated to the redeemable. This field is available only if object is not `campaign`
    attr_accessor :campaign_id

    attr_accessor :validation_rules_assignments

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'object' => :'object',
        :'created_at' => :'created_at',
        :'result' => :'result',
        :'order' => :'order',
        :'validation_rule_id' => :'validation_rule_id',
        :'applicable_to' => :'applicable_to',
        :'inapplicable_to' => :'inapplicable_to',
        :'metadata' => :'metadata',
        :'categories' => :'categories',
        :'banner' => :'banner',
        :'name' => :'name',
        :'campaign_name' => :'campaign_name',
        :'campaign_id' => :'campaign_id',
        :'validation_rules_assignments' => :'validation_rules_assignments'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'object' => :'String',
        :'created_at' => :'Time',
        :'result' => :'RedeemableResult',
        :'order' => :'OrderCalculated',
        :'validation_rule_id' => :'String',
        :'applicable_to' => :'ApplicableToResultList',
        :'inapplicable_to' => :'InapplicableToResultList',
        :'metadata' => :'Object',
        :'categories' => :'Array<Category>',
        :'banner' => :'String',
        :'name' => :'String',
        :'campaign_name' => :'String',
        :'campaign_id' => :'String',
        :'validation_rules_assignments' => :'ValidationRulesAssignmentsList'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'id',
        :'object',
        :'created_at',
        :'validation_rule_id',
        :'metadata',
        :'categories',
        :'banner',
        :'name',
        :'campaign_name',
        :'campaign_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'result')
        self.result = attributes[:'result']
      end

      if attributes.key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.key?(:'validation_rule_id')
        self.validation_rule_id = attributes[:'validation_rule_id']
      end

      if attributes.key?(:'applicable_to')
        self.applicable_to = attributes[:'applicable_to']
      end

      if attributes.key?(:'inapplicable_to')
        self.inapplicable_to = attributes[:'inapplicable_to']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'banner')
        self.banner = attributes[:'banner']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'campaign_name')
        self.campaign_name = attributes[:'campaign_name']
      end

      if attributes.key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end

      if attributes.key?(:'validation_rules_assignments')
        self.validation_rules_assignments = attributes[:'validation_rules_assignments']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      object_validator = EnumAttributeValidator.new('String', ["campaign", "promotion_tier", "promotion_stack", "voucher"])
      return false unless object_validator.valid?(@object)
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          created_at == o.created_at &&
          result == o.result &&
          order == o.order &&
          validation_rule_id == o.validation_rule_id &&
          applicable_to == o.applicable_to &&
          inapplicable_to == o.inapplicable_to &&
          metadata == o.metadata &&
          categories == o.categories &&
          banner == o.banner &&
          name == o.name &&
          campaign_name == o.campaign_name &&
          campaign_id == o.campaign_id &&
          validation_rules_assignments == o.validation_rules_assignments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, created_at, result, order, validation_rule_id, applicable_to, inapplicable_to, metadata, categories, banner, name, campaign_name, campaign_id, validation_rules_assignments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VoucherifySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
