=begin
#Voucherify API

#Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

The version of the OpenAPI document: v2018-08-01
Contact: support@voucherify.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module VoucherifySdk
  class Discount
    attr_accessor :type

    # Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.
    attr_accessor :amount_off

    attr_accessor :amount_off_formula

    # Maximum discount amount per order.
    attr_accessor :aggregated_amount_limit

    attr_accessor :effect

    # Flag indicating whether the discount was calculated using a formula.
    attr_accessor :is_dynamic

    # Number of units to be granted a full value discount.
    attr_accessor :unit_off

    attr_accessor :unit_off_formula

    # The product deemed as free, chosen from product inventory (e.g. time, items).
    attr_accessor :unit_type

    attr_accessor :product

    attr_accessor :sku

    attr_accessor :units

    # The percent discount that the customer will receive.
    attr_accessor :percent_off

    attr_accessor :percent_off_formula

    # Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600.
    attr_accessor :amount_limit

    # Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.
    attr_accessor :fixed_amount

    attr_accessor :fixed_amount_formula

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'amount_off' => :'amount_off',
        :'amount_off_formula' => :'amount_off_formula',
        :'aggregated_amount_limit' => :'aggregated_amount_limit',
        :'effect' => :'effect',
        :'is_dynamic' => :'is_dynamic',
        :'unit_off' => :'unit_off',
        :'unit_off_formula' => :'unit_off_formula',
        :'unit_type' => :'unit_type',
        :'product' => :'product',
        :'sku' => :'sku',
        :'units' => :'units',
        :'percent_off' => :'percent_off',
        :'percent_off_formula' => :'percent_off_formula',
        :'amount_limit' => :'amount_limit',
        :'fixed_amount' => :'fixed_amount',
        :'fixed_amount_formula' => :'fixed_amount_formula'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'amount_off' => :'Float',
        :'amount_off_formula' => :'String',
        :'aggregated_amount_limit' => :'Integer',
        :'effect' => :'String',
        :'is_dynamic' => :'Boolean',
        :'unit_off' => :'Integer',
        :'unit_off_formula' => :'String',
        :'unit_type' => :'String',
        :'product' => :'SimpleProductDiscountUnit',
        :'sku' => :'SimpleSkuDiscountUnit',
        :'units' => :'Array<DiscountUnitMultipleOneUnit>',
        :'percent_off' => :'Float',
        :'percent_off_formula' => :'String',
        :'amount_limit' => :'Float',
        :'fixed_amount' => :'Float',
        :'fixed_amount_formula' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'type',
        :'amount_off',
        :'amount_off_formula',
        :'aggregated_amount_limit',
        :'effect',
        :'is_dynamic',
        :'unit_off',
        :'unit_off_formula',
        :'unit_type',
        :'units',
        :'percent_off',
        :'percent_off_formula',
        :'amount_limit',
        :'fixed_amount',
        :'fixed_amount_formula'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'amount_off')
        self.amount_off = attributes[:'amount_off']
      end

      if attributes.key?(:'amount_off_formula')
        self.amount_off_formula = attributes[:'amount_off_formula']
      end

      if attributes.key?(:'aggregated_amount_limit')
        self.aggregated_amount_limit = attributes[:'aggregated_amount_limit']
      end

      if attributes.key?(:'effect')
        self.effect = attributes[:'effect']
      end

      if attributes.key?(:'is_dynamic')
        self.is_dynamic = attributes[:'is_dynamic']
      end

      if attributes.key?(:'unit_off')
        self.unit_off = attributes[:'unit_off']
      end

      if attributes.key?(:'unit_off_formula')
        self.unit_off_formula = attributes[:'unit_off_formula']
      end

      if attributes.key?(:'unit_type')
        self.unit_type = attributes[:'unit_type']
      end

      if attributes.key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'units')
        if (value = attributes[:'units']).is_a?(Array)
          self.units = value
        end
      end

      if attributes.key?(:'percent_off')
        self.percent_off = attributes[:'percent_off']
      end

      if attributes.key?(:'percent_off_formula')
        self.percent_off_formula = attributes[:'percent_off_formula']
      end

      if attributes.key?(:'amount_limit')
        self.amount_limit = attributes[:'amount_limit']
      end

      if attributes.key?(:'fixed_amount')
        self.fixed_amount = attributes[:'fixed_amount']
      end

      if attributes.key?(:'fixed_amount_formula')
        self.fixed_amount_formula = attributes[:'fixed_amount_formula']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      type_validator = EnumAttributeValidator.new('String', ["AMOUNT", "UNIT", "PERCENT", "FIXED"])
      return false unless type_validator.valid?(@type)
      effect_validator = EnumAttributeValidator.new('String', ["APPLY_TO_ORDER", "APPLY_TO_ITEMS", "APPLY_TO_ITEMS_PROPORTIONALLY", "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY", "APPLY_TO_ITEMS_BY_QUANTITY", "ADD_MISSING_ITEMS", "ADD_NEW_ITEMS", "ADD_MANY_ITEMS"])
      return false unless effect_validator.valid?(@effect)
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          amount_off == o.amount_off &&
          amount_off_formula == o.amount_off_formula &&
          aggregated_amount_limit == o.aggregated_amount_limit &&
          effect == o.effect &&
          is_dynamic == o.is_dynamic &&
          unit_off == o.unit_off &&
          unit_off_formula == o.unit_off_formula &&
          unit_type == o.unit_type &&
          product == o.product &&
          sku == o.sku &&
          units == o.units &&
          percent_off == o.percent_off &&
          percent_off_formula == o.percent_off_formula &&
          amount_limit == o.amount_limit &&
          fixed_amount == o.fixed_amount &&
          fixed_amount_formula == o.fixed_amount_formula
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, amount_off, amount_off_formula, aggregated_amount_limit, effect, is_dynamic, unit_off, unit_off_formula, unit_type, product, sku, units, percent_off, percent_off_formula, amount_limit, fixed_amount, fixed_amount_formula].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VoucherifySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
